package main

import (
	"fmt"
	"os"
)

var cssClasses = []string{
	`.agriculture`,
	`.gas`,
	`.ccgt`,
	`.coal`,
	`.cooking`,
	`.oil`,
	`.bioenergy`,
	`.environmentalheat`,
	`.geothermal`,
	`.h2`,
	`.hydro`,
	`.nuclear`,
	`.offshorewind`,
	`.other`,
	`.onshorewind`,
	`.pv`,
	`.solar`,
	// `text.solar`,
	`.tidal`,
	`.wave`,
	`.wind`,
	`.ccs`,

	// Specific to electricty supply chart
	`.conventional`,
	`.tidalandwave`,
	`.electricity`,

	// Specific to the energy demand chart
	`.transport`,
	`.heatingcooling`,
	`.industry`,
	`.lightingappliances`,
	// `text.lightingappliances`,

	// The emissions chart
	`.carboncapture`,
	// `.lulucf`,
	`.fuelcombustion`,
	`.aviationandshipping`,
	`.waste`,

	// Not yet used?
	`.commercialheat`,
	`.commerciallight`,
	`.districtheating`,
	`.domesticfreight`,
	`.domesticlight`,
	`.domesticpassengertransport`,
	`.domesticheat`,
}

type Color interface {
	Css() string
}

type HSL struct {
	H int
	S int
	L int
}

func NewHSL(h, s, l int) *HSL {
	return &HSL{h, s, l}
}

func (h *HSL) Css() string {
	return fmt.Sprintf(`hsl(%d,%d,%d)`, h.H, int(float32(h.S)/2.55), int(float32(h.L)/2.55))
}

type Lighten struct {
	Color   Color
	Percent int
}

func (l *Lighten) Css() string {
	return fmt.Sprintf(`lighten(%s, %d%%)`, l.Color.Css(), l.Percent)
}

type Mix struct {
	A      Color
	B      Color
	Weight int
}

func (m *Mix) Css() string {
	return fmt.Sprintf(`mix(%s, %s, %d%%)`, m.A.Css(), m.B.Css(), m.Weight)
}

func main() {
	out, err := os.Create("colors.css.scss")
	if nil != err {
		panic(err)
	}
	defer out.Close()

	fmt.Println("Total colors:", len(cssClasses))
	fmt.Fprintln(out, "// Generated by gencolors.go - DO NOT EDIT")

	colorC := make(chan Color)
	go func() {
		for s := 0; s < 7; s++ {
			for l := 0; l < 6; l++ {
				c := NewHSL(136+16*s, 16+24*s, 64+l*24)
				colorC <- c
			}
		}
		close(colorC)
	}()

	for _, c := range cssClasses {
		color := <-colorC
		fmt.Fprintf(out,
			"%s { fill: %s; }\n",
			c, color.Css(),
		)
	}
	// fmt.Fprintln(out, "$start0: #464;")
	// fmt.Fprintln(out, "$start0: darken(#ced, 0%);")
	// fmt.Fprintln(out, "$start1: #bec8b7;")
	// fmt.Fprintln(out, "$start2: #363;")
	// fmt.Fprintln(out, "$start3: #366;")

	// perc := 0
	// colour := 0
	// for _, c := range cssClasses {
	// 	fmt.Fprintf(out,
	// 		"%s { fill: lighten($start%d, %d%%); }\n",
	// 		c, colour, perc,
	// 	)
	// 	perc += 5
	// 	if perc >= 25 {
	// 		perc -= 23
	// 		if 6 == perc {
	// 			perc = 0
	// 			colour++
	// 		}
	// 		//colour++
	// 	}
	// }
}
